#summary Detailed description each task assigned to me on the issues page.

= Auto Completion. Due: 2/28 =

Here is how I'm envisioning this working from the user's perspective: I the user will need to initiate the function by pushing a key. Not sure which key...it doesn't really matter. This will then call a function which calculate the shortest path, and animate the character on that path through the pick job. It won't matter if the character is on a pallet-jack or not when the user asks for it.


== Details ==

-pre-requisite: Chris' generic controller

-pre-requisite: grid system with "don't walk here" ability

-This really involves 3 steps

    * getting the information on where to go (2-3 days…already have the basic working code in the “showArrow” function) 
    * doing the logic on which path is the shortest, including taking out the spaces where I can’t go. This would be a SSSP or an APSP with just going from where I am to where I need to go. (4-5 days)
    * getting the character to actually move on that path. It’s simple enough to find the path, but to actually use it would take a little more code. (2-3 days)



="Collision detection" using grid. Due: ??=

Essentially, instead of checking every "collide-able" object in the warehouse, we want to just be checking the grid-nodes around us to see if the one we want to walk onto is either "walk-able" or "not walk-able". This would allow for a very quick search to be done to see whether or not we can go somewhere, or if we need to "collide" and stop at a certain point.

==Details==
-pre-requisites: none.
The way I see it, this is sort of a complex problem involving a few steps

   * add a field in the "gridNode" class which represents whether or not a grid is "walkable" or not. (couple of hours)
   * somehow determining where the grid-nodes are in relation to the racks in the warehouse. This really is the key step here, and the one that will probably be the biggest hinderer to getting this done. (1 week)
   * once we know that a rack (or any other object) is on top of the grid-node, we can mark it "not walk-able" (2 days)
   * changing the "checkCollisions" function to reflect the fact that we're using a grid. This means checking the grid nodes around where the player is walking to see if a grid node is "walkable" or not, keeping the player from moving onto the "not walk-able" grid nodes. (2-3 days)