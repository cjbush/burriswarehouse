#summary Detailed description each task assigned to me on the issues page.

= Auto Completion. Due: 2/28 =

Here is how I'm envisioning this working from the user's perspective: I the user will need to initiate the function by pushing a key. Not sure which key...it doesn't really matter. This will then call a function which calculate the shortest path, and animate the character on that path through the pick job. It won't matter if the character is on a pallet-jack or not when the user asks for it.


== Details ==

-pre-requisite: Chris' generic controller

-pre-requisite: grid system with "don't walk here" ability

-This really involves 3 steps

    * getting the information on where to go (2-3 days…already have the basic working code in the “showArrow” function) 
    * doing the logic on which path is the shortest, including taking out the spaces where I can’t go. This would be a SSSP or an APSP with just going from where I am to where I need to go. (4-5 days)
    * getting the character to actually move on that path. It’s simple enough to find the path, but to actually use it would take a little more code. (2-3 days)



="Collision detection" using grid. Due: 2/14=

Basic idea: we're going to make custom "bounding boxes". Basically, what this means is that we're going to surround everything that is going to be "non-walkable" -- the majority of the things in this list will be the racks. In fact, whole shelves of racks and the random pallets laying around may be the only things in this list. The actual "collidables" list should dwindle down to things like: the warehouse walls, and the characters, etc...nothing like all of the racks. That can just be done with some 2d stuff.

==Details==
-pre-requisites: none.

The way I see it, this is sort of a complex problem involving a few steps

   * create a class which contains 4 fields (at least): two X-positions and two Y-positions. This will become the base class for the "non-walkable" sections of the warehouse. (few hours)
   * create a table in the db that has these 4 fields in the db. This will contain the actual numbers. These numbers will make a rectangle, inside of which, the user will not be able to walk. (few hours)
   * place these rectangles around large areas (whole rows of racks, for example). This will keep the checking in a 2d field, and not in 3d. Should be able to keep the player out of this box, but simply checking to see if the player wants to walk into it, or if that player is in it, then stopping the player's velocity. Basically. (2-3 days)